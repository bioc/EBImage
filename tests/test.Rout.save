
R version 3.1.1 (2014-07-10) -- "Sock it to Me"
Copyright (C) 2014 The R Foundation for Statistical Computing
Platform: x86_64-unknown-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ## cat tests/test.R | R --vanilla &>tests/test.Rout.save
> library("EBImage")
> 
> ## returns a hashcode given an object
> hash <- function(x) {
+   if (is.list(x)) hash(sapply(x,hash))
+   else {
+     xd <- as.numeric(x)
+     xd <- xd[!is.nan(xd)]
+     if (is.matrix(xd)) sum(xd*(1:length(xd))) + 0.7*hash(dim(xd))
+     else sum(xd*(1:length(xd))) - 0.1
+   }
+ }
> 
> ## try to evaluate fun(x,...) 
> check <- function(fun, x, ...) {
+   passed <- TRUE
+ 
+   cat("checking \'", fun, "\' ... ", sep="")
+   y=try(do.call(fun,c(list(x),list(...))), silent=TRUE)
+   if (class(y)=="try-error" || ( is.Image(y) && !validObject(y)) ) {
+     y <- NULL
+     passed <- FALSE
+   }
+ 
+   if (passed) cat("OK (hash=", hash(y), ")\n", sep="") 
+   else cat("FAILED\n")
+ 
+   y
+ }
> 
> testEBImageFunctions <- function(x) {
+   cat("new test (hash=", hash(x), ")\n", sep="")
+ 
+   ## pixel arithmetic
+   z <- check(">", x, 0.5)
+   z <- check("+", x, x)
+   z <- check("/", x, 2)
+   z <- check("transpose", x)
+   if (mode(x)!="logical") z <- check("median", x)
+ 
+   ## image methods
+   z <- check("Image", x, colormode=Color)
+   z <- check("as.Image", x)
+   z <- check("is.Image", x)
+   z <- check("imageData", x)
+   z <- check("imageData<-", x, z)
+   z <- check("colorMode<-", x, Grayscale)
+   z <- check("numberOfFrames", x, type="render")
+ 
+   ## subset
+   sub <- list(x, 1:10, 1:7)
+   if (length(dim(x))>2) sub <- c(sub, rep(TRUE, length(dim(x))-2))
+   z <- do.call("check", c("[", sub))
+ 
+   ## spatial transform
+   z <- check("resize", x, 137, 22)
+   z <- check("rotate", x, 20)
+   z <- check("flip", x)
+   z <- check("flop", x)
+   z <- check("translate", x, c(-7, 5))
+   z <- check("affine", x, matrix(c(-7, 5, 0.1, -0.2, 0.3, 1), ncol=2))
+   z <- check("transpose", x)
+ 
+   ## segmentation
+   z <- check("thresh", x)
+   y <- check("bwlabel", x>0.5)
+   z <- check("rmObjects", getFrame(y, 1), 3)
+   z <- check("reenumerate", y)
+   z <- paintObjects(channel(y, "gray"), x)
+   y <- check("ocontour", x>0.5)
+   z <- check("localCurvature", y[[1]])
+ 
+   ## filtering
+   z <- check("normalize", x)
+   z <- check("gblur", x, sigma=2)
+   z <- check("filter2", x, array(1, dim=c(5, 5)))
+   if (length(dim(x))<=3) z <- check("medianFilter", x, 3)
+ 
+   ## morphological operations
+   y <- x>0.5
+   z <- check("erode", y)
+   z <- check("dilate", y)
+   z <- check("distmap", y)
+   z <- check("watershed", y)
+   z <- check('floodFill', y, c(10, 10), 0.5)
+   z <- check('fillHull', y)
+   z <- check("erodeGreyScale", x)
+   z <- check("dilateGreyScale", x)
+   z <- check("whiteTopHatGreyScale", x)
+   z <- check("selfcomplementaryTopHatGreyScale", x)
+ 
+   ## colorspace
+   z <- check("channel", x, "rgb")
+   z <- check("rgbImage", x, x>0.5)
+ 
+   ## image stacking, combining, tiling
+   z <- check("combine", x, x)
+   y <- check("tile", x, nx=2)
+   z <- check("untile", y, c(2,2))
+ 
+   ## features
+   y <- getFrame(x, 1)
+   z <- check("computeFeatures", bwlabel(y>0.5), y, expandRef=NULL)
+   cat("\n")
+ }
> 
> ## test: grayscale 2D 
> x <- readImage(system.file("images","sample.png", package="EBImage"))[1:32, 1:48]
> testEBImageFunctions(x)
new test (hash=765760.9)
checking '>' ... OK (hash=988518.9)
checking '+' ... OK (hash=1531522)
checking '/' ... OK (hash=382880.4)
checking 'transpose' ... OK (hash=652051.4)
checking 'median' ... OK (hash=0.5039216)
checking 'Image' ... OK (hash=765760.9)
checking 'as.Image' ... OK (hash=765760.9)
checking 'is.Image' ... OK (hash=0.9)
checking 'imageData' ... OK (hash=765760.9)
checking 'imageData<-' ... OK (hash=765760.9)
checking 'colorMode<-' ... OK (hash=765760.9)
checking 'numberOfFrames' ... OK (hash=0.9)
checking '[' ... OK (hash=1285.273)
checking 'resize' ... OK (hash=2892296)
checking 'rotate' ... OK (hash=543123.2)
checking 'flip' ... OK (hash=661525.2)
checking 'flop' ... OK (hash=768451.1)
checking 'translate' ... OK (hash=528551.8)
checking 'affine' ... OK (hash=24605.68)
checking 'transpose' ... OK (hash=652051.4)
checking 'thresh' ... OK (hash=351487.9)
checking 'bwlabel' ... OK (hash=988518.9)
checking 'rmObjects' ... OK (hash=988518.9)
checking 'reenumerate' ... OK (hash=988518.9)
checking 'ocontour' ... OK (hash=848253.8)
checking 'localCurvature' ... OK (hash=847428.3)
checking 'normalize' ... OK (hash=747801.4)
checking 'gblur' ... OK (hash=757134.4)
checking 'filter2' ... OK (hash=18975839)
checking 'medianFilter' ... OK (hash=764201.8)
checking 'erode' ... OK (hash=908526.9)
checking 'dilate' ... OK (hash=1066933)
checking 'distmap' ... OK (hash=12740449)
checking 'watershed' ... OK (hash=988518.9)
checking 'floodFill' ... OK (hash=494259.4)
checking 'fillHull' ... OK (hash=988518.9)
checking 'erodeGreyScale' ... OK (hash=711005.3)
checking 'dilateGreyScale' ... OK (hash=801884.4)
checking 'whiteTopHatGreyScale' ... OK (hash=6554.339)
checking 'selfcomplementaryTopHatGreyScale' ... OK (hash=-8715.147)
checking 'channel' ... OK (hash=6584422)
checking 'rgbImage' ... OK (hash=3520680)
checking 'combine' ... OK (hash=2960568)
checking 'tile' ... OK (hash=3859260)
checking 'untile' ... OK (hash=3086653)
checking 'computeFeatures' ... OK (hash=143330.1)

> 
> ## test: color 2D
> x <- readImage(system.file("images","sample-color.png", package="EBImage"))[1:65, 1:17,]
> testEBImageFunctions(x)
new test (hash=2036151)
checking '>' ... OK (hash=1058553)
checking '+' ... OK (hash=4072301)
checking '/' ... OK (hash=1018075)
checking 'transpose' ... OK (hash=1907377)
checking 'median' ... OK (hash=0.2333333)
checking 'Image' ... OK (hash=2036151)
checking 'as.Image' ... OK (hash=2036151)
checking 'is.Image' ... OK (hash=0.9)
checking 'imageData' ... OK (hash=2036151)
checking 'imageData<-' ... OK (hash=2036151)
checking 'colorMode<-' ... OK (hash=2036151)
checking 'numberOfFrames' ... OK (hash=0.9)
checking '[' ... OK (hash=9950.096)
checking 'resize' ... OK (hash=14861531)
checking 'rotate' ... OK (hash=1282623)
checking 'flip' ... OK (hash=1977928)
checking 'flop' ... OK (hash=2048664)
checking 'translate' ... OK (hash=1227441)
checking 'affine' ... OK (hash=242529.7)
checking 'transpose' ... OK (hash=1907377)
checking 'thresh' ... OK (hash=1351867)
checking 'bwlabel' ... OK (hash=1058553)
checking 'rmObjects' ... OK (hash=226938.9)
checking 'reenumerate' ... OK (hash=1058553)
checking 'ocontour' ... OK (hash=117866.8)
checking 'localCurvature' ... OK (hash=116636.2)
checking 'normalize' ... OK (hash=1788995)
checking 'gblur' ... OK (hash=2023705)
checking 'filter2' ... OK (hash=50652074)
checking 'medianFilter' ... OK (hash=1994829)
checking 'erode' ... OK (hash=830816.9)
checking 'dilate' ... OK (hash=1293651)
checking 'distmap' ... OK (hash=6038778)
checking 'watershed' ... OK (hash=1058553)
checking 'floodFill' ... OK (hash=2055834)
checking 'fillHull' ... OK (hash=1058553)
checking 'erodeGreyScale' ... OK (hash=1910799)
checking 'dilateGreyScale' ... OK (hash=2131265)
checking 'whiteTopHatGreyScale' ... OK (hash=24772.23)
checking 'selfcomplementaryTopHatGreyScale' ... OK (hash=8814.088)
checking 'channel' ... OK (hash=2036151)
checking 'rgbImage' ... OK (hash=7617867)
checking 'combine' ... OK (hash=8350133)
checking 'tile' ... OK (hash=15580056)
checking 'untile' ... OK (hash=11979224)
checking 'computeFeatures' ... OK (hash=110247.9)

> 
> ## test: color 3D
> x <- readImage(system.file("images","sample-color.png", package="EBImage"))[1:33, 1:16,]
> x <- combine(x, x)
> testEBImageFunctions(x)
new test (hash=2354709)
checking '>' ... OK (hash=2013322)
checking '+' ... OK (hash=4709417)
checking '/' ... OK (hash=1177354)
checking 'transpose' ... OK (hash=2303263)
checking 'median' ... OK (hash=0.3823529)
checking 'Image' ... OK (hash=2354709)
checking 'as.Image' ... OK (hash=2354709)
checking 'is.Image' ... OK (hash=0.9)
checking 'imageData' ... OK (hash=2354709)
checking 'imageData<-' ... OK (hash=2354709)
checking 'colorMode<-' ... OK (hash=2354709)
checking 'numberOfFrames' ... OK (hash=1.9)
checking '[' ... OK (hash=40701.82)
checking 'resize' ... OK (hash=74670396)
checking 'rotate' ... OK (hash=1859277)
checking 'flip' ... OK (hash=2309692)
checking 'flop' ... OK (hash=2358658)
checking 'translate' ... OK (hash=1368709)
checking 'affine' ... OK (hash=311872.2)
checking 'transpose' ... OK (hash=2303263)
checking 'thresh' ... OK (hash=1981320)
checking 'bwlabel' ... OK (hash=2013322)
checking 'rmObjects' ... OK (hash=102832.9)
checking 'reenumerate' ... OK (hash=2013322)
checking 'ocontour' ... OK (hash=107408.8)
checking 'localCurvature' ... OK (hash=106275.7)
checking 'normalize' ... OK (hash=2693244)
checking 'gblur' ... OK (hash=2344608)
checking 'filter2' ... OK (hash=58662977)
checking 'erode' ... OK (hash=1547948)
checking 'dilate' ... OK (hash=2509384)
checking 'distmap' ... OK (hash=10836360)
checking 'watershed' ... OK (hash=2013322)
checking 'floodFill' ... OK (hash=2122061)
checking 'fillHull' ... OK (hash=2013322)
checking 'erodeGreyScale' ... OK (hash=2165546)
checking 'dilateGreyScale' ... OK (hash=2490913)
checking 'whiteTopHatGreyScale' ... OK (hash=22258.68)
checking 'selfcomplementaryTopHatGreyScale' ... OK (hash=-27455.43)
checking 'channel' ... OK (hash=2354709)
checking 'rgbImage' ... OK (hash=12071186)
checking 'combine' ... OK (hash=9516503)
checking 'tile' ... OK (hash=3146417)
checking 'untile' ... OK (hash=1881137)
checking 'computeFeatures' ... OK (hash=107378.4)

> 
> ## test: logical 2D
> x <- readImage(system.file("images","sample.png", package="EBImage"))[32:63, 32:63]
> x <- x > otsu(x)
> testEBImageFunctions(x)
new test (hash=305571.9)
checking '>' ... OK (hash=305571.9)
checking '+' ... OK (hash=611143.9)
checking '/' ... OK (hash=152785.9)
checking 'transpose' ... OK (hash=156833.9)
checking 'Image' ... OK (hash=305571.9)
checking 'as.Image' ... OK (hash=305571.9)
checking 'is.Image' ... OK (hash=0.9)
checking 'imageData' ... OK (hash=305571.9)
checking 'imageData<-' ... OK (hash=305571.9)
checking 'colorMode<-' ... OK (hash=305571.9)
checking 'numberOfFrames' ... OK (hash=0.9)
checking '[' ... OK (hash=489.9)
checking 'resize' ... OK (hash=2553592)
checking 'rotate' ... OK (hash=244134.5)
checking 'flip' ... OK (hash=135011.9)
checking 'flop' ... OK (hash=309837.9)
checking 'translate' ... OK (hash=231498.9)
checking 'affine' ... OK (hash=15706.94)
checking 'transpose' ... OK (hash=156833.9)
checking 'thresh' ... OK (hash=235338.9)
checking 'bwlabel' ... OK (hash=445403.9)
checking 'rmObjects' ... OK (hash=431115.9)
checking 'reenumerate' ... OK (hash=445403.9)
checking 'ocontour' ... OK (hash=836958.8)
checking 'localCurvature' ... OK (hash=835041.5)
checking 'normalize' ... OK (hash=305571.9)
checking 'gblur' ... OK (hash=286335.2)
checking 'filter2' ... OK (hash=7265220)
checking 'medianFilter' ... OK (hash=303738.9)
checking 'erode' ... OK (hash=187823.9)
checking 'dilate' ... OK (hash=412021.9)
checking 'distmap' ... OK (hash=1177281)
checking 'watershed' ... OK (hash=310713.9)
checking 'floodFill' ... OK (hash=409339.9)
checking 'fillHull' ... OK (hash=317263.9)
checking 'erodeGreyScale' ... OK (hash=173035.9)
checking 'dilateGreyScale' ... OK (hash=414305.9)
checking 'whiteTopHatGreyScale' ... OK (hash=43120.9)
checking 'selfcomplementaryTopHatGreyScale' ... OK (hash=80184.9)
checking 'channel' ... OK (hash=2249964)
checking 'rgbImage' ... OK (hash=1055560)
checking 'combine' ... OK (hash=1055560)
checking 'tile' ... OK (hash=1698607)
checking 'untile' ... OK (hash=1277379)
checking 'computeFeatures' ... OK (hash=21530906)

> 
